#!/usr/bin/env python
import os
from os.path import join
from waflib.extras.test_base import summary
from waflib.extras.symwaf2ic import get_toplevel_path


def depends(ctx):
    ctx('hxcomm')


def options(opt):
    opt.load('compiler_cxx')
    opt.load('boost')
    opt.load('python')
    opt.load('pytest')
    opt.load('genpybind')
    opt.load('pylint')
    opt.load('pycodestyle')
    opt.load('gtest')


def configure(cfg):
    cfg.load('compiler_cxx')
    cfg.load('boost')
    cfg.load('python')
    cfg.check_python_version()
    cfg.check_python_headers()
    cfg.load('pytest')
    cfg.load('genpybind')
    cfg.load('pylint')
    cfg.load('pycodestyle')
    cfg.load('gtest')


def build(bld):
    bld.env.DLSvx_HARDWARE_AVAILABLE = "SLURM_HWDB_YAML" in os.environ
    bld.env.DLSvx_SIM_AVAILABLE = "FLANGE_SIMULATION_RCF_PORT" in os.environ

    pyhxcomm_defines = [
        # Needed to be able to use operator""_s instad of BOOST_HANA_STRING.
        'BOOST_HANA_CONFIG_ENABLE_STRING_UDL',
    ]

    bld(target          = 'pyhxcomm_inc',
        export_includes = 'include',
        export_defines  = pyhxcomm_defines,
    )

    bld(
        target='pyhxcomm_vx',
        source='include/pyhxcomm/vx/python_bindings.h',
        genpybind_tags='hxcomm_vx',
        genpybind_num_files=10,
        features='genpybind cxx cxxshlib pyext',
        use=['hxcomm', 'pyhxcomm_inc'],
    )

    bld(
        target       = 'pyhxcomm_swtests_vx_cxx',
        features     = 'gtest cxx cxxprogram pyembed',
        source       = bld.path.ant_glob('tests/sw/test-*.cpp'),
        use          = ['hxcomm', 'pyhxcomm_inc', 'BOOST4HXCOMMTOOLS'],
        defines      = pyhxcomm_defines,
        test_timeout = 120,
        uselib       = 'HXCOMM',
        test_main    = 'tests/sw/main.cpp',
    )

    bld(
        target='pyhxcomm_swtests_vx_py',
        tests=bld.path.ant_glob('tests/sw/*.py'),
        features='use pytest',
        use='pyhxcomm_vx',
        install_path='${PREFIX}/bin',
        pythonpath=['tests'],
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        test_timeout=120,
    )

    bld(
        target='pyhxcomm_hwtests_vx_py',
        tests=bld.path.ant_glob('tests/hw/*.py'),
        features='use pytest',
        use='pyhxcomm_vx',
        install_path='${PREFIX}/bin',
        pythonpath=['tests'],
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        skip_run=not (bld.env.DLSvx_SIM_AVAILABLE or bld.env.DLSvx_HARDWARE_AVAILABLE),
        test_timeout=120,
    )

    bld.add_post_fun(summary)
